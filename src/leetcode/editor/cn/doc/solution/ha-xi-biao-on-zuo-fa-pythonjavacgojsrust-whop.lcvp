首先，本题是不能排序的，因为排序的时间复杂度是 $\mathcal{O}(n\log n)$，不符合题目 $\mathcal{O}(n)$ 的要求。

**核心思路**：对于 $\textit{nums}$ 中的元素 $x$，以 $x$ 为起点，不断查找下一个数 $x+1,x+2,\cdots$ 是否在 $\textit{nums}$ 中，并统计序列的长度。

为了做到 $\mathcal{O}(n)$ 的时间复杂度，需要两个**关键优化**：

1. 把 $\textit{nums}$ 中的数都放入一个**哈希集合**中，这样可以 $\mathcal{O}(1)$ 判断数字是否在 $\textit{nums}$ 中。
2. 如果 $x-1$ 在哈希集合中，则不以 $x$ 为起点。为什么？因为以 $x-1$ 为起点计算出的序列长度，一定比以 $x$ 为起点计算出的序列长度要长！这样可以避免大量重复计算。比如 $\textit{nums}=[3,2,4,5]$，从 $3$ 开始，我们可以找到 $3,4,5$ 这个连续序列；而从 $2$ 开始，我们可以找到 $2,3,4,5$ 这个连续序列，一定比从 $3$ 开始的序列更长。

⚠**注意**：遍历元素的时候，要遍历哈希集合，而不是 $\textit{nums}$！如果 $\textit{nums}=[1,1,1,\ldots,1,2,3,4,5,\ldots]$（前一半都是 $1$），遍历 $\textit{nums}$ 的做法会导致每个 $1$ 都跑一个 $\mathcal{O}(n)$ 的循环，总的循环次数是 $\mathcal{O}(n^2)$，会超时。

* [sol-Python3]

```py
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        st = set(nums)  # 把 nums 转成哈希集合
        ans = 0
        for x in st:  # 遍历哈希集合
            if x - 1 in st:  # 如果 x 不是序列的起点，直接跳过
                continue
            # x 是序列的起点
            y = x + 1
            while y in st:  # 不断查找下一个数是否在哈希集合中
                y += 1
            # 循环结束后，y-1 是最后一个在哈希集合中的数
            ans = max(ans, y - x)  # 从 x 到 y-1 一共 y-x 个数
        return ans
```

* [sol-Java]

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> st = new HashSet<>();
        for (int num : nums) {
            st.add(num); // 把 nums 转成哈希集合
        }

        int ans = 0;
        for (int x : st) { // 遍历哈希集合
            if (st.contains(x - 1)) { // 如果 x 不是序列的起点，直接跳过
                continue;
            }
            // x 是序列的起点
            int y = x + 1;
            while (st.contains(y)) { // 不断查找下一个数是否在哈希集合中
                y++;
            }
            // 循环结束后，y-1 是最后一个在哈希集合中的数
            ans = Math.max(ans, y - x); // 从 x 到 y-1 一共 y-x 个数
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> st(nums.begin(), nums.end()); // 把 nums 转成哈希集合
        int ans = 0;
        for (int x : st) { // 遍历哈希集合
            if (st.contains(x - 1)) { // 如果 x 不是序列的起点，直接跳过
                continue;
            }
            // x 是序列的起点
            int y = x + 1;
            while (st.contains(y)) { // 不断查找下一个数是否在哈希集合中
                y++;
            }
            // 循环结束后，y-1 是最后一个在哈希集合中的数
            ans = max(ans, y - x); // 从 x 到 y-1 一共 y-x 个数
        }
        return ans;
    }
};
```

* [sol-C]

```c
#define MAX(a, b) ((b) > (a) ? (b) : (a))

typedef struct {
    int key; // 哈希集合保存的元素
    UT_hash_handle hh; // uthash 需要
} HashEntry;

int longestConsecutive(int* nums, int numsSize) {
    HashEntry* hashSet = NULL; // 创建一个空哈希集合
    HashEntry* e;
    // 构建哈希集合
    for (int i = 0; i < numsSize; i++) {
        HASH_FIND_INT(hashSet, &nums[i], e);
        if (e == NULL) { // 如果 nums[i] 不在集合中，则插入
            e = malloc(sizeof(HashEntry));
            e->key = nums[i];
            HASH_ADD_INT(hashSet, key, e);
        }
    }

    int ans = 0;
    HashEntry* tmp;
    HASH_ITER(hh, hashSet, e, tmp) { // 遍历哈希集合
        int x = e->key;
        int y = x - 1;
        HASH_FIND_INT(hashSet, &y, e);
        if (e) { // 如果 x 不是序列的起点，直接跳过
            continue;
        }
        // x 是序列的起点
        y = x;
        do {
            y++;
            HASH_FIND_INT(hashSet, &y, e);
        } while (e);
        // 循环结束后，y-1 是最后一个在哈希集合中的数
        ans = MAX(ans, y - x);
    }

    // 释放哈希表中所有节点，防止内存泄漏
    HASH_ITER(hh, hashSet, e, tmp) {
        HASH_DEL(hashSet, e);
        free(e);
    }

    return ans;
}
```

* [sol-Go]

```go
func longestConsecutive(nums []int) (ans int) {
    has := map[int]bool{}
    for _, num := range nums {
        has[num] = true // 把 nums 转成哈希集合
    }

    for x := range has { // 遍历哈希集合
        if has[x-1] { // 如果 x 不是序列的起点，直接跳过
            continue
        }
        // x 是序列的起点
        y := x + 1
        for has[y] { // 不断查找下一个数是否在哈希集合中
            y++
        }
        // 循环结束后，y-1 是最后一个在哈希集合中的数
        ans = max(ans, y-x) // 从 x 到 y-1 一共 y-x 个数
    }
    return
}
```

* [sol-JavaScript]

```js
var longestConsecutive = function(nums) {
    const st = new Set(nums); // 把 nums 转成哈希集合
    let ans = 0;
    for (const x of st) { // 遍历哈希集合
        if (st.has(x - 1)) { // 如果 x 不是序列的起点，直接跳过
            continue;
        }
        // x 是序列的起点
        let y = x + 1;
        while (st.has(y)) { // 不断查找下一个数是否在哈希集合中
            y++;
        }
        // 循环结束后，y-1 是最后一个在哈希集合中的数
        ans = Math.max(ans, y - x); // 从 x 到 y-1 一共 y-x 个数
    }
    return ans;
};
```

* [sol-Rust]

```rust
use std::collections::HashSet;

impl Solution {
    pub fn longest_consecutive(nums: Vec<i32>) -> i32 {
        let st = nums.into_iter().collect::<HashSet<_>>(); // 把 nums 转成哈希集合
        let mut ans = 0;
        for &x in &st { // 遍历哈希集合
            if st.contains(&(x - 1)) { // 如果 x 不是序列的起点，直接跳过
                continue;
            }
            // x 是序列的起点
            let mut y = x + 1;
            while st.contains(&y) { // 不断查找下一个数是否在哈希集合中
                y += 1;
            }
            // 循环结束后，y-1 是最后一个在哈希集合中的数
            ans = ans.max(y - x); // 从 x 到 y-1 一共 y-x 个数
        }
        ans
    }
}
```

**小优化**：设 $m$ 为 $\textit{nums}$ 中的不同元素个数（即哈希集合的大小）。各个连续序列（链）是互相独立的，如果我们发现其中一条链的长度至少为 $\dfrac{m}{2}$（长度乘 $2$ 大于等于 $m$），由于不可能还有一条长度大于 $\dfrac{m}{2}$ 的链（否则这两条链的长度之和就超过 $m$ 了），答案不会再增大，此时可以直接返回答案。

* [sol-Python3]

```py
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        st = set(nums)  # 把 nums 转成哈希集合
        m = len(st)

        ans = 0
        for x in st:  # 遍历哈希集合
            if x - 1 in st:  # 如果 x 不是序列的起点，直接跳过
                continue
            # x 是序列的起点
            y = x + 1
            while y in st:  # 不断查找下一个数是否在哈希集合中
                y += 1
            # 循环结束后，y-1 是最后一个在哈希集合中的数
            ans = max(ans, y - x)  # 从 x 到 y-1 一共 y-x 个数
            if ans * 2 >= m:  # ans 不可能变得更大
                break
        return ans
```

* [sol-Java]

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> st = new HashSet<>();
        for (int num : nums) {
            st.add(num); // 把 nums 转成哈希集合
        }
        int m = st.size();

        int ans = 0;
        for (int x : st) { // 遍历哈希集合
            if (st.contains(x - 1)) { // 如果 x 不是序列的起点，直接跳过
                continue;
            }
            // x 是序列的起点
            int y = x + 1;
            while (st.contains(y)) { // 不断查找下一个数是否在哈希集合中
                y++;
            }
            // 循环结束后，y-1 是最后一个在哈希集合中的数
            ans = Math.max(ans, y - x); // 从 x 到 y-1 一共 y-x 个数
            if (ans * 2 >= m) {
                break;
            }
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int> st(nums.begin(), nums.end()); // 把 nums 转成哈希集合
        int ans = 0;
        for (int x : st) { // 遍历哈希集合
            if (st.contains(x - 1)) { // 如果 x 不是序列的起点，直接跳过
                continue;
            }
            // x 是序列的起点
            int y = x + 1;
            while (st.contains(y)) { // 不断查找下一个数是否在哈希集合中
                y++;
            }
            // 循环结束后，y-1 是最后一个在哈希集合中的数
            ans = max(ans, y - x); // 从 x 到 y-1 一共 y-x 个数
            if (ans * 2 >= st.size()) {
                break;
            }
        }
        return ans;
    }
};
```

* [sol-C]

```c
#define MAX(a, b) ((b) > (a) ? (b) : (a))

typedef struct {
    int key; // 哈希集合保存的元素
    UT_hash_handle hh; // uthash 需要
} HashEntry;

int longestConsecutive(int* nums, int numsSize) {
    HashEntry* hashSet = NULL; // 创建一个空哈希集合
    HashEntry* e;
    // 构建哈希集合
    for (int i = 0; i < numsSize; i++) {
        HASH_FIND_INT(hashSet, &nums[i], e);
        if (e == NULL) { // 如果 nums[i] 不在集合中，则插入
            e = malloc(sizeof(HashEntry));
            e->key = nums[i];
            HASH_ADD_INT(hashSet, key, e);
        }
    }
    int m = HASH_COUNT(hashSet);

    int ans = 0;
    HashEntry* tmp;
    HASH_ITER(hh, hashSet, e, tmp) { // 遍历哈希集合
        int x = e->key;
        int y = x - 1;
        HASH_FIND_INT(hashSet, &y, e);
        if (e) { // 如果 x 不是序列的起点，直接跳过
            continue;
        }
        // x 是序列的起点
        y = x;
        do {
            y++;
            HASH_FIND_INT(hashSet, &y, e);
        } while (e);
        // 循环结束后，y-1 是最后一个在哈希集合中的数
        ans = MAX(ans, y - x);
        if (ans * 2 >= m) {
            break;
        }
    }

    // 释放哈希表中所有节点，防止内存泄漏
    HASH_ITER(hh, hashSet, e, tmp) {
        HASH_DEL(hashSet, e);
        free(e);
    }

    return ans;
}
```

* [sol-Go]

```go
func longestConsecutive(nums []int) (ans int) {
    has := map[int]bool{}
    for _, num := range nums {
        has[num] = true // 把 nums 转成哈希集合
    }
    m := len(has)

    for x := range has { // 遍历哈希集合
        if has[x-1] { // 如果 x 不是序列的起点，直接跳过
            continue
        }
        // x 是序列的起点
        y := x + 1
        for has[y] { // 不断查找下一个数是否在哈希集合中
            y++
        }
        // 循环结束后，y-1 是最后一个在哈希集合中的数
        ans = max(ans, y-x) // 从 x 到 y-1 一共 y-x 个数
        if ans*2 >= m {
            break
        }
    }
    return
}
```

* [sol-JavaScript]

```js
var longestConsecutive = function(nums) {
    const st = new Set(nums); // 把 nums 转成哈希集合
    let ans = 0;
    for (const x of st) { // 遍历哈希集合
        if (st.has(x - 1)) { // 如果 x 不是序列的起点，直接跳过
            continue;
        }
        // x 是序列的起点
        let y = x + 1;
        while (st.has(y)) { // 不断查找下一个数是否在哈希集合中
            y++;
        }
        // 循环结束后，y-1 是最后一个在哈希集合中的数
        ans = Math.max(ans, y - x); // 从 x 到 y-1 一共 y-x 个数
        if (ans * 2 >= st.size) {
            break;
        }
    }
    return ans;
};
```

* [sol-Rust]

```rust
use std::collections::HashSet;

impl Solution {
    pub fn longest_consecutive(nums: Vec<i32>) -> i32 {
        let st = nums.into_iter().collect::<HashSet<_>>(); // 把 nums 转成哈希集合
        let m = st.len();

        let mut ans = 0;
        for &x in &st { // 遍历哈希集合
            if st.contains(&(x - 1)) { // 如果 x 不是序列的起点，直接跳过
                continue;
            }
            // x 是序列的起点
            let mut y = x + 1;
            while st.contains(&y) { // 不断查找下一个数是否在哈希集合中
                y += 1;
            }
            // 循环结束后，y-1 是最后一个在哈希集合中的数
            ans = ans.max(y - x); // 从 x 到 y-1 一共 y-x 个数
            if ans as usize * 2 >= m {
                break;
            }
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 是 $\textit{nums}$ 的长度。在二重循环中，每个元素至多遍历两次：在外层循环中遍历一次，在内层循环中遍历一次。所以二重循环的时间复杂度是 $\mathcal{O}(n)$ 的。比如 $\textit{nums} = [1,2,3,4]$，其中 $2,3,4$ 不会进入内层循环，只有 $1$ 会进入内层循环。
- 空间复杂度：$\mathcal{O}(m)$。其中 $m$ 是 $\textit{nums}$ 中的不同元素个数。

## 相似题目

- [2007. 从双倍数组中还原原数组](https://leetcode.cn/problems/find-original-array-from-doubled-array/)

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/基环树/最短路/最小生成树/网络流）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/划分/状态机/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
